! Preferences file for NEdit
! (User settings in X "application defaults" format)
!
! This file is overwritten by the "Save Defaults..." command in NEdit
! and serves only the interactively settable options presented in the NEdit
! "Preferences" menu.  To modify other options, such as key bindings, use
! the .Xdefaults file in your home directory (or the X resource
! specification method appropriate to your system).  The contents of this
! file can be moved into an X resource file, but since resources in this file
! override their corresponding X resources, either this file should be 
! deleted or individual resource lines in the file should be deleted for the
! moved lines to take effect.

nedit.fileVersion: 5.6
nedit.shellCommands: \
	spell:Alt+B:s:EX:\n\
		cat>spellTmp; xterm -e ispell -x spellTmp; cat spellTmp; rm spellTmp\n\
	wc::w:ED:\n\
		wc | awk '{print $1 " lines, " $2 " words, " $3 " characters"}'\n\
	sort::o:EX:\n\
		sort\n\
	number lines::n:AW:\n\
		nl -ba\n\
	make:Alt+Z:m:W:\n\
		make\n\
	expand::p:EX:\n\
		expand\n\
	unexpand::u:EX:\n\
		unexpand\n\
	astyle:Shift+Ctrl+I::IX:\n\
		astyle.nedit --style=allman --indent=spaces=4 --indent-switches --break-blocks --pad-oper --keep-one-line-blocks --keep-one-line-statements --align-pointer=type --align-reference=type --convert-tabs\n\
	chmod>chmod +w:::DSL:\n\
		/bin/chmod +w %\n\
	chmod>chmod -w:::DSL:\n\
		/bin/chmod -w %\n\
	chmod>chmod +x:::DSL:\n\
		/bin/chmod +x %\n\
	chmod>chmod -x:::DSL:\n\
		/bin/chmod -x %\n\
	c++filt:::IX:\n\
		c++filt\n\
	svn diff:::W:\n\
		svn diff --diff-cmd=diff -x-ud % | tail -n+3\n
nedit.macroCommands: \
	Complete Word:Alt+D::: {\n\
		# This macro attempts to complete the current word by\n\
		# finding another word in the same document that has\n\
		# the same prefix; repeated invocations of the macro\n\
		# (by repeated typing of its accelerator, say) cycles\n\
		# through the alternatives found.\n\
		# \n\
		# Make sure $compWord contains something (a dummy index)\n\
		$compWord[""] = ""\n\
		\n\
		# Test whether the rest of $compWord has been initialized:\n\
		# this avoids having to initialize the global variable\n\
		# $compWord in an external macro file\n\
		if (!("wordEnd" in $compWord)) {\n\
		    # we need to initialize it\n\
		    $compWord["wordEnd"] = 0\n\
		    $compWord["repeat"] = 0\n\
		    $compWord["init"] = 0\n\
		    $compWord["wordStart"] = 0\n\
		}\n\
		\n\
		if ($compWord["wordEnd"] == $cursor) {\n\
		        $compWord["repeat"] += 1\n\
		}\n\
		else {\n\
		   $compWord["repeat"] = 1\n\
		   $compWord["init"] = $cursor\n\
		\n\
		   # search back to a word boundary to find the word to complete\n\
		   # (we use \\w here to allow for programming "words" that can include\n\
		   # digits and underscores; use \\l for letters only)\n\
		   $compWord["wordStart"] = search("<\\\\w+", $cursor, "backward", "regex", "wrap")\n\
		\n\
		   if ($compWord["wordStart"] == -1)\n\
		      return\n\
		\n\
		    if ($search_end == $cursor)\n\
		       $compWord["word"] = get_range($compWord["wordStart"], $cursor)\n\
		    else\n\
		        return\n\
		}\n\
		s = $cursor\n\
		for (i=0; i <= $compWord["repeat"]; i++)\n\
		    s = search($compWord["word"], s - 1, "backward", "regex", "wrap")\n\
		\n\
		if (s == $compWord["wordStart"]) {\n\
		   beep()\n\
		   $compWord["repeat"] = 0\n\
		   s = $compWord["wordStart"]\n\
		   se = $compWord["init"]\n\
		}\n\
		else\n\
		   se = search(">", s, "regex")\n\
		\n\
		replace_range($compWord["wordStart"], $cursor, get_range(s, se))\n\
		\n\
		$compWord["wordEnd"] = $cursor\n\
	}\n\
	Fill Sel. w/Char:::R: {\n\
		# This macro replaces each character position in\n\
		# the selection with the string typed into the dialog\n\
		# it displays.\n\
		if ($selection_start == -1) {\n\
		    beep()\n\
		    return\n\
		}\n\
		\n\
		# Ask the user what character to fill with\n\
		fillChar = string_dialog("Fill selection with what character?", \\\n\
		                         "OK", "Cancel")\n\
		if ($string_dialog_button == 2 || $string_dialog_button == 0)\n\
		    return\n\
		\n\
		# Count the number of lines (NL characters) in the selection\n\
		# (by removing all non-NLs in selection and counting the remainder)\n\
		nLines = length(replace_in_string(get_selection(), \\\n\
		                                  "^.*$", "", "regex"))\n\
		\n\
		rectangular = $selection_left != -1\n\
		\n\
		# work out the pieces of required of the replacement text\n\
		# this will be top mid bot where top is empty or ends in NL,\n\
		# mid is 0 or more lines of repeats ending with NL, and\n\
		# bot is 0 or more repeats of the fillChar\n\
		\n\
		toplen = -1 # top piece by default empty (no NL)\n\
		midlen = 0\n\
		botlen = 0\n\
		\n\
		if (rectangular) {\n\
		    # just fill the rectangle:  mid\\n \\ nLines\n\
		    #                           mid\\n /\n\
		    #                           bot   - last line with no nl\n\
		    midlen = $selection_right -  $selection_left\n\
		    botlen = $selection_right -  $selection_left\n\
		} else {\n\
		    #                  |col[0]\n\
		    #         .........toptoptop\\n                      |col[0]\n\
		    # either  midmidmidmidmidmid\\n \\ nLines - 1   or ...botbot...\n\
		    #         midmidmidmidmidmid\\n /                          |col[1]\n\
		    #         botbot...         |\n\
		    #                 |col[1]   |wrap margin\n\
		    # we need column positions col[0], col[1] of selection start and\n\
		    # end (use a loop and arrays to do the two positions)\n\
		    sel[0] = $selection_start\n\
		    sel[1] = $selection_end\n\
		\n\
		    # col[0] = pos_to_column($selection_start)\n\
		    # col[1] = pos_to_column($selection_end)\n\
		\n\
		    for (i = 0; i < 2; ++i) {\n\
		        end = sel[i]\n\
		        pos = search("^", end, "regex", "backward")\n\
		        thisCol = 0\n\
		        while (pos < end) {\n\
		            nexttab = search("\\t", pos)\n\
		            if (nexttab < 0 || nexttab >= end) {\n\
		                thisCol += end - pos # count remaining non-tabs\n\
		                nexttab = end\n\
		            } else {\n\
		                thisCol += nexttab - pos + $tab_dist\n\
		                thisCol -= (thisCol % $tab_dist)\n\
		            }\n\
		            pos = nexttab + 1 # skip past the tab or end\n\
		        }\n\
		        col[i] = thisCol\n\
		    }\n\
		    toplen = max($wrap_margin - col[0], 0)\n\
		    botlen = min(col[1], $wrap_margin)\n\
		\n\
		    if (nLines == 0) {\n\
		        toplen = -1\n\
		        botlen = max(botlen - col[0], 0)\n\
		    } else {\n\
		        midlen = $wrap_margin\n\
		        if (toplen < 0)\n\
		            toplen = 0\n\
		        nLines-- # top piece will end in a NL\n\
		    }\n\
		}\n\
		\n\
		# Create the fill text\n\
		# which is the longest piece? make a line of that length\n\
		# (use string doubling - this allows the piece to be\n\
		# appended to double in size at each iteration)\n\
		\n\
		len = max(toplen, midlen, botlen)\n\
		charlen = length(fillChar) # maybe more than one char given!\n\
		\n\
		line = ""\n\
		while (len > 0) {\n\
		    if (len % 2)\n\
		        line = line fillChar\n\
		    len /= 2\n\
		    if (len > 0)\n\
		        fillChar = fillChar fillChar\n\
		}\n\
		# assemble our pieces\n\
		toppiece = ""\n\
		midpiece = ""\n\
		botpiece = ""\n\
		if (toplen >= 0)\n\
		    toppiece = substring(line, 0, toplen * charlen) "\\n"\n\
		if (botlen > 0)\n\
		    botpiece = substring(line, 0, botlen * charlen)\n\
		\n\
		# assemble midpiece (use doubling again)\n\
		line = substring(line, 0, midlen * charlen) "\\n"\n\
		while (nLines > 0) {\n\
		    if (nLines % 2)\n\
		        midpiece = midpiece line\n\
		    nLines /= 2\n\
		    if (nLines > 0)\n\
		        line = line line\n\
		}\n\
		# Replace the selection with the complete fill text\n\
		replace_selection(toppiece midpiece botpiece)\n\
	}\n\
	Quote Mail Reply:::: {\n\
		if ($selection_start == -1)\n\
		    replace_all("^.*$", "\\\\> &", "regex")\n\
		else\n\
		    replace_in_selection("^.*$", "\\\\> &", "regex")\n\
	}\n\
	Unquote Mail Reply:::: {\n\
		if ($selection_start == -1)\n\
		    replace_all("(^\\\\> )(.*)$", "\\\\2", "regex")\n\
		else\n\
		    replace_in_selection("(^\\\\> )(.*)$", "\\\\2", "regex")\n\
	}\n\
	Comments>/* Comment */@C@C++@Java@CSS@JavaScript@Lex:::R: {\n\
		selStart = $selection_start\n\
		selEnd = $selection_end\n\
		replace_range(selStart, selEnd, "/* " get_selection() " */")\n\
		select(selStart, selEnd + 6)\n\
	}\n\
	Comments>/* Uncomment */@C@C++@Java@CSS@JavaScript@Lex:::R: {\n\
		pos = search("(?n\\\\s*/\\\\*\\\\s*)", $selection_start, "regex")\n\
		start = $search_end\n\
		end = search("(?n\\\\*/\\\\s*)", $selection_end, "regex", "backward")\n\
		if (pos != $selection_start || end == -1 )\n\
		    return\n\
		replace_selection(get_range(start, end))\n\
		select(pos, $cursor)\n\
	}\n\
	Comments>// Comment@C@C++@Java@JavaScript:::R: {\n\
		replace_in_selection("^.*$", "// &", "regex")\n\
	}\n\
	Comments>// Uncomment@C@C++@Java@JavaScript:::R: {\n\
		replace_in_selection("(^[ \\\\t]*// ?)(.*)$", "\\\\2", "regex")\n\
	}\n\
	Comments># Comment@Perl@Sh Ksh Bash@NEdit Macro@Makefile@Awk@Csh@Python@Tcl:::R: {\n\
		replace_in_selection("^.*$", "#&", "regex")\n\
	}\n\
	Comments># Uncomment@Perl@Sh Ksh Bash@NEdit Macro@Makefile@Awk@Csh@Python@Tcl:::R: {\n\
		replace_in_selection("(^[ \\\\t]*#)(.*)$", "\\\\2", "regex")\n\
	}\n\
	Comments>-- Comment@SQL:::R: {\n\
		replace_in_selection("^.*$", "--&", "regex")\n\
	}\n\
	Comments>-- Uncomment@SQL:::R: {\n\
		replace_in_selection("(^[ \\\\t]*--)(.*)$", "\\\\2", "regex")\n\
	}\n\
	Comments>! Comment@X Resources:::R: {\n\
		replace_in_selection("^.*$", "!&", "regex")\n\
	}\n\
	Comments>! Uncomment@X Resources:::R: {\n\
		replace_in_selection("(^[ \\\\t]*!)(.*)$", "\\\\2", "regex")\n\
	}\n\
	Comments>% Comment@LaTeX:::R: {\n\
		replace_in_selection("^.*$", "%&", "regex")\n\
	}\n\
	Comments>% Uncomment@LaTeX:::R: {\n\
		replace_in_selection("(^[ \\\\t]*%)(.*)$", "\\\\2", "regex")\n\
	}\n\
	Comments>Bar Comment@C:::R: {\n\
		if ($selection_left != -1) {\n\
		    dialog("Selection must not be rectangular")\n\
		    return\n\
		}\n\
		start = $selection_start\n\
		end = $selection_end-1\n\
		origText = get_range($selection_start, $selection_end-1)\n\
		newText = "/*\\n" replace_in_string(get_range(start, end), \\\n\
		    "^", " * ", "regex") "\\n */\\n"\n\
		replace_selection(newText)\n\
		select(start, start + length(newText))\n\
	}\n\
	Comments>Bar Uncomment@C:::R: {\n\
		selStart = $selection_start\n\
		selEnd = $selection_end\n\
		pos = search("/\\\\*\\\\s*\\\\n", selStart, "regex")\n\
		if (pos != selStart) return\n\
		start = $search_end\n\
		end = search("\\\\n\\\\s*\\\\*/\\\\s*\\\\n?", selEnd, "regex", "backward")\n\
		if (end == -1 || $search_end < selEnd) return\n\
		newText = get_range(start, end)\n\
		newText = replace_in_string(newText,"^ *\\\\* ?", "", "regex", "copy")\n\
		if (get_range(selEnd, selEnd - 1) == "\\n") selEnd -= 1\n\
		replace_range(selStart, selEnd, newText)\n\
		select(selStart, selStart + length(newText))\n\
	}\n\
	Make C Prototypes@C@C++:::: {\n\
		# simplistic extraction of C function prototypes, usually good enough\n\
		if ($selection_start == -1) {\n\
		    start = 0\n\
		    end = $text_length\n\
		} else {\n\
		    start = $selection_start\n\
		    end = $selection_end\n\
		}\n\
		string = get_range(start, end)\n\
		# remove all C++ and C comments, then all blank lines in the extracted range\n\
		string = replace_in_string(string, "//.*$", "", "regex", "copy")\n\
		string = replace_in_string(string, "(?n/\\\\*.*?\\\\*/)", "", "regex", "copy")\n\
		string = replace_in_string(string, "^\\\\s*\\n", "", "regex", "copy")\n\
		nDefs = 0\n\
		searchPos = 0\n\
		prototypes = ""\n\
		staticPrototypes = ""\n\
		for (;;) {\n\
		    headerStart = search_string(string, \\\n\
		        "^[a-zA-Z]([^;#\\"'{}=><!/]|\\n)*\\\\)[ \\t]*\\n?[ \\t]*\\\\{", \\\n\
		        searchPos, "regex")\n\
		    if (headerStart == -1)\n\
		        break\n\
		    headerEnd = search_string(string, ")", $search_end,"backward") + 1\n\
		    prototype = substring(string, headerStart, headerEnd) ";\\n"\n\
		    if (substring(string, headerStart, headerStart+6) == "static")\n\
		        staticPrototypes = staticPrototypes prototype\n\
		    else\n\
		        prototypes = prototypes prototype\n\
		    searchPos = headerEnd\n\
		    nDefs++\n\
		}\n\
		if (nDefs == 0) {\n\
		    dialog("No function declarations found")\n\
		    return\n\
		}\n\
		new()\n\
		focus_window("last")\n\
		replace_range(0, 0, prototypes staticPrototypes)\n\
	}\n
nedit.bgMenuCommands: \
	Undo:::: {\n\
		undo()\n\
	}\n\
	Redo:::: {\n\
		redo()\n\
	}\n\
	Cut:::R: {\n\
		cut_clipboard()\n\
	}\n\
	Copy:::R: {\n\
		copy_clipboard()\n\
	}\n\
	Paste:::: {\n\
		paste_clipboard()\n\
	}\n
nedit.highlightPatterns: Ada:Default\n\
	Awk:Default\n\
	C++:1:0{\n\
		comment:"/\\*":"\\*/"::Comment::\n\
		cplus comment:"//":"(?<!\\\\)$"::Comment::\n\
		string:"L?""":"""":"\\n":String::\n\
		preprocessor line:"^\\s*#\\s*(?:include|define|if|ifn?def|line|error|else|endif|elif|undef|pragma)>":"$"::Preprocessor::\n\
		string escape chars:"\\\\(?:.|\\n)":::String1:string:\n\
		preprocessor esc chars:"\\\\(?:.|\\n)":::Preprocessor1:preprocessor line:\n\
		preprocessor comment:"/\\*":"\\*/"::Comment:preprocessor line:\n\
		preproc cplus comment:"//":"$"::Comment:preprocessor line:\n\
		preprocessor string:"L?""":"""":"\\n":Preprocessor1:preprocessor line:\n\
		prepr string esc chars:"\\\\(?:.|\\n)":::String1:preprocessor string:\n\
		preprocessor keywords:"<__(?:LINE|FILE|DATE|TIME|STDC)__>":::Preprocessor::\n\
		character constant:"L?'":"'":"[^\\\\][^']":Character Const::\n\
		numeric constant:"(?<!\\Y)(?:(?:0(?:x|X)[0-9a-fA-F]*)|(?:(?:[0-9]+\\.?[0-9]*)|(?:\\.[0-9]+))(?:(?:e|E)(?:\\+|-)?[0-9]+)?)(?:L|l|UL|ul|u|U|F|f)?(?!\\Y)":::Numeric Const::D\n\
		storage keyword:"<(?:class|typename|typeid|template|friend|virtual|inline|explicit|operator|public|private|protected|const|extern|register|static|mutable|unsigned|signed|volatile|char|double|float|int|long|short|bool|wchar_t|void|typedef|struct|union|enum|asm|export|constexpr)>":::Storage Type::D\n\
		keyword:"<(?:new|delete|this|return|goto|if|else|case|default|switch|break|continue|while|do|for|try|catch|throw|sizeof|true|false|namespace|using|dynamic_cast|static_cast|reinterpret_cast|const_cast|declype|auto|override|final|noexcept|final|decltype)>":::Keyword::D\n\
		braces:"[{}\\|(\\)\\[\\]<>]":::Keyword::D\n\
		C++11 raw string literal:"R""(.*?)\\((?n.+?)\\)\\1""":::String2::\n\
	}\n\
	C:Default\n\
	CSS:Default\n\
	Csh:Default\n\
	Fortran:Default\n\
	Java:Default\n\
	JavaScript:Default\n\
	LaTeX:Default\n\
	Lex:Default\n\
	Makefile:Default\n\
	Matlab:Default\n\
	NEdit Macro:Default\n\
	Pascal:Default\n\
	Perl:Default\n\
	PostScript:Default\n\
	Python:Default\n\
	Regex:Default\n\
	SGML HTML:Default\n\
	SQL:Default\n\
	Sh Ksh Bash:Default\n\
	Tcl:Default\n\
	VHDL:Default\n\
	Verilog:Default\n\
	XML:Default\n\
	X Resources:Default\n\
	Yacc:Default\n\
	CMake:1:0{\n\
		comment:"#.*":::Comment::\n\
		string:"""":"""":"\\n":String2::\n\
		string escape chars:"\\\\(?:.|\\n)":::String1:string:\n\
		var reference:"(\\$\\{\\w+\\})|(@\\w+@)":::Identifier::\n\
		var reference in string:"(?:\\$\\{\\w+\\})|(?:@\\w+@)":::Identifier1:string:\n\
		punctuation:"[()]":::Keyword::\n\
		known functions:"(<(?:ADD_CUSTOM_COMMAND|ADD_CUSTOM_TARGET|ADD_DEFINITIONS|ADD_DEPENDENCIES|ADD_EXECUTABLE|ADD_LIBRARY|ADD_SUBDIRECTORY|ADD_TEST|AUX_SOURCE_DIRECTORY|BUILD_COMMAND|BUILD_NAME|CMAKE_MINIMUM_REQUIRED|CONFIGURE_FILE|CREATE_TEST_SOURCELIST|ELSE|ELSEIF|ENABLE_LANGUAGE|ENABLE_TESTING|ENDFOREACH|ENDIF|ENDMACRO|ENDWHILE|EXECUTE_PROCESS|EXEC_PROGRAM|EXPORT_LIBRARY_DEPENDENCIES|FILE|FIND_FILE|FIND_LIBRARY|FIND_PACKAGE|FIND_PATH|FIND_PROGRAM|FLTK_WRAP_UI|FOREACH|GET_CMAKE_PROPERTY|GET_DIRECTORY_PROPERTY|GET_FILENAME_COMPONENT|GET_SOURCE_FILE_PROPERTY|GET_TARGET_PROPERTY|GET_TEST_PROPERTY|IF|INCLUDE|INCLUDE_DIRECTORIES|INCLUDE_EXTERNAL_MSPROJECT|INCLUDE_REGULAR_EXPRESSION|INSTALL|INSTALL_FILES|INSTALL_PROGRAMS|INSTALL_TARGETS|LINK_DIRECTORIES|LINK_LIBRARIES|LIST|LOAD_CACHE|LOAD_COMMAND|MACRO|MAKE_DIRECTORY|MARK_AS_ADVANCED|MATH|MESSAGE|OPTION|OUTPUT_REQUIRED_FILES|QT_WRAP_CPP|QT_WRAP_UI|REMOVE|REMOVE_DEFINITIONS|SEPARATE_ARGUMENTS|SET|SET_DIRECTORY_PROPERTIES|SET_SOURCE_FILES_PROPERTIES|SET_TARGET_PROPERTIES|SET_TESTS_PROPERTIES|SITE_NAME|SOURCE_GROUP|STRING|SUBDIRS|SUBDIR_DEPENDS|TARGET_LINK_LIBRARIES|TRY_COMPILE|TRY_RUN|USE_MANGLED_MESA|UTILITY_SOURCE|VARIABLE_REQUIRES|VTK_MAKE_INSTANTIATOR|VTK_WRAP_JAVA|VTK_WRAP_PYTHON|VTK_WRAP_TCL|WHILE|WRITE_FILE)>)\\s*\\(":::Keyword::\n\
		known function names:"\\1":::Identifier2:known functions:C\n\
		keywords:"(?:<(?:ABSOLUTE|AFTER|ALL|AND|APPEND|ARCHIVE|ARCHIVE DESTINATION|ARGS|ASCII|BEFORE|CACHE|CLEAR|CMAKE_FLAGS|CODE|COMMAND|COMMANDS|COMMAND_NAME|COMMENT|COMPARE EQUAL|COMPARE GREATER|COMPARE LESS|COMPARE NOTEQUAL|COMPILE_DEFINITIONS|COMPONENT|COMPONENTS|CONFIGURATIONS|CONFIGURE|COPYONLY|CVS|DBAR|DEFINED|DEPENDS|DESTINATION|DIRECTORY|DIRECTORY_PERMISSIONS|DOC|EQUAL|ERROR_FILE|ERROR_QUIET|ERROR_STRIP_TRAILING_WHITESPACE|ERROR_VARIABLE|ESCAPE_QUOTES|EXCLUDE|EXCLUDE_FROM_ALL|EXISTS|EXPORT_MACRO|EXPR|EXT|EXTRA_INCLUDE|FATAL_ERROR|FILE|FILES|FILE_PERMISSIONS|FORCE|FUNCTION|GET|GLOB|GLOB_RECURSE|GREATER|GROUP_EXECUTE GROUP_READ|GROUP_SIZE|HEADER_LOCATION|INCLUDES|INCLUDE_INTERNALS|INPUT_FILE|INSERT|IS_DIRECTORY|IS_NEWER_THAN|LENGTH|LESS|LIBRARY|LIBRARY DESTINATION|MACOSX_BUNDLE|MAIN_DEPENDENCY|MAKECOMMAND|MAKE_DIRECTORY|MATCHES|MESSAGE|MODULE|NAME|NAMES|NAME_WE|NOT|NO_CMAKE_ENVIRONMENT_PATH|NO_CMAKE_PATH|NO_CMAKE_SYSTEM_PATH|NO_DEFAULT_PATH|NO_MODULE|NO_SYSTEM_ENVIRONMENT_PATH|OFF|ON|ONLY|OPTIONAL|OPTION_VAR|OR|OUTPUT|OUTPUT_FILE|OUTPUT_QUIET|OUTPUT_STRIP_TRAILING_WHITESPACE|OUTPUT_VARIABLE|PATH|PATHS|PATH_SUFFIXES|PATTERN|PERMISSIONS|PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ|POST_BUILD|PREORDER|PRE_BUILD|PRE_LINK|PROGRAM|PROGRAMS|PROGRAM_ARGS|PROPERTIES|QUIET|RANGE|READ|READ_WITH_PREFIX|REGEX|REGEX MATCH|REGEX MATCHALL|REGEX REPLACE|REGULAR_EXPRESSION|RELATIVE|RELATIVE_PATH|REMOVE|REMOVE_AT|REMOVE_ITEM|REMOVE_RECURSE|RENAME|REPLACE|REQUIRED|RESULT_VAR|RESULT_VARIABLE|RETURN_VALUE|REVERSE|RUNTIME|RUNTIME DESTINATION|RUNTIME_DIRECTORY|RUN_RESULT_VAR COMPILE_RESULT_VAR|SCRIPT|SEND_ERROR|SHARED|SORT|SOURCES|STATIC|STATUS|STREQUAL|STRGREATER|STRLESS|SUBSTRING|SYSTEM|TARGET|TARGETS|TEST_VARIABLE RESULT_VARIABLE|TIMEOUT|TOLOWER|TOUPPER|TO_CMAKE_PATH|TO_NATIVE_PATH|USE_SOURCE_PERMISSIONS|VARIABLE|VERBATIM|VERSION|WORKING_DIRECTORY|WRITE|debug|optimized)>)|@ONLY":::Keyword::\n\
		properties:"<(?:ABSTRACT|ADDITIONAL_MAKE_CLEAN_FILES|BUILD_WITH_INSTALL_RPATH|CACHE_VARIABLES|CLEAN_DIRECT_OUTPUT|COMPILE_FLAGS|CONFIG|CXX|DEBUG_LOCATION|DEBUG_OUTPUT_NAME|DEBUG_POSTFIX|DEFINE_SYMBOL|DEFINITION|DEFINITIONS|EXCLUDE_FROM_DEFAULT_BUILD|EXECUTABLE|FAIL_REGULAR_EXPRESSION|GENERATED|HEADER_FILE_ONLY|IMPORT_PREFIX|IMPORT_SUFFIX|INSTALL_NAME_DIR|INSTALL_RPATH|INSTALL_RPATH_USE_LINK_PATH|LINKER_LANGUAGE|LINK_FLAGS|LINK_FLAGS_DEBUG|LINK_FLAGS_MINSIZEREL|LINK_FLAGS_RELEASE|LINK_FLAGS_RELWITHDEBINFO|LISTFILE_STACK|LOCATION|MACROS|MINSIZEREL_LOCATION|MINSIZEREL_OUTPUT_NAME|MINSIZEREL_POSTFIX|MODULE_LIBRARY|OBJECT_DEPENDS|OUTPUT_NAME|PARENT_DIRECTORY|PASS_REGULAR_EXPRESSION|POST_INSTALL_SCRIPT|PREFIX|PRE_INSTALL_SCRIPT|PROJECT_LABEL|RELEASE_LOCATION|RELEASE_OUTPUT_NAME|RELEASE_POSTFIX|RELWITHDEBINFO_LOCATION|RELWITHDEBINFO_OUTPUT_NAME|RELWITHDEBINFO_POSTFIX|SHARED_LIBRARY|SKIP_BUILD_RPATH|SOVERSION|STATIC_LIBRARY|SUFFIX|SYMBOLIC|UTILITY|VARIABLES|VS_KEYWORD|WILL_FAIL|WRAP_EXCLUDE)>":::Label::\n\
		ProjectDecl:"PROJECT\\s*\\((\\w+)((?:\\s+(?iC|C\\+\\+|Java|None))*)\\s*\\)":::Storage Type::\n\
		ProjectName:"\\1\\2":::Character Const:ProjectDecl:C\n\
	}\n\
	Diff:1:0{\n\
		File1:"^\\-\\-\\-\\s .*$":::DiffFile1::\n\
		File2:"^(\\+\\+\\+\\s|\\*\\*\\*\\s|\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*).*$":::DiffFile2::\n\
		Lines:"^(@@\\s|!\\s|\\.).*(@@$|$)":::DiffHunk::\n\
		In:"^(\\+|a[0-9]*\\s[0-9]*).*$":::DiffIn::\n\
		Out:"^(-|d[0-9]*\\s[0-9]*|c[0-9]*).*$":::DiffOut::\n\
	}
nedit.languageModes: 	Ada:.ada .ad .ads .adb .a:::::::\n\
	Awk:.awk:::::::\n\
	C++:.cc .hh .C .H .i .cxx .hxx .cpp .c++::::::".,/\\`'!|@#%^&*()-=+{}[]"":;<>?~":\n\
	C:.c .h::::::".,/\\`'!|@#%^&*()-=+{}[]"":;<>?~":\n\
	CSS:css::Auto:None:::".,/\\`'!|@#%^&*()=+{}[]"":;<>?~":\n\
	Csh:.csh .cshrc .tcshrc .login .logout:"^[ \\t]*#[ \\t]*![ \\t]*/bin/t?csh"::::::\n\
	Fortran:.f .f77 .for:::::::\n\
	Java:.java:::::::\n\
	JavaScript:.js:::::::\n\
	LaTeX:.tex .sty .cls .ltx .ins .clo .fd:::::::\n\
	Lex:.lex:::::::\n\
	Makefile:Makefile makefile .gmk:::None:8:8::\n\
	Matlab:.m .oct .sci:::::::\n\
	NEdit Macro:.nm .neditmacro:::::::\n\
	Pascal:.pas .p .int:::::::\n\
	Perl:.pl .pm .p5 .PL:"^[ \\t]*#[ \\t]*!.*perl":Auto:None:::".,/\\\\`'!$@#%^&*()-=+{}[]"":;<>?~|":\n\
	PostScript:.ps .eps .epsf .epsi:"^%!":::::"/%(){}[]<>":\n\
	Python:.py:"^#!.*python":Auto:None:::"!""#$%&'()*+,-./:;<=>?@[\\\\]^`{|}~":\n\
	Regex:.reg .regex:"\\(\\?[:#=!iInN].+\\)":None:Continuous::::\n\
	SGML HTML:.sgml .sgm .html .htm:"\\<[Hh][Tt][Mm][Ll]\\>"::::::\n\
	SQL:.sql:::::::\n\
	Sh Ksh Bash:.sh .bash .ksh .profile .bashrc .bash_logout .bash_login .bash_profile:"^[ \\t]*#[ \\t]*![ \\t]*/.*bin/(bash|ksh|sh|zsh)"::::::\n\
	Tcl:.tcl .tk .itcl .itk::Smart:None::::\n\
	VHDL:.vhd .vhdl .vdl:::::::\n\
	Verilog:.v:::::::\n\
	XML:.xml .xsl .dtd:"\\<(?i\\?xml|!doctype)"::None:::"<>/=""'()+*?|":\n\
	X Resources:.Xresources .Xdefaults .nedit .pats nedit.rc:"^[!#].*([Aa]pp|[Xx]).*[Dd]efaults"::::::\n\
	Yacc:.y::::::".,/\\`'!|@#%^&*()-=+{}[]"":;<>?~":\n\
	CMake:CMakeLists.txt .cmake:::None:::".,/\\`'!|@#%^&*()-=+{}[]"":;<>?~":\n\
	Diff:.diff .patch:"^(---\\s.*$|\\+\\+\\+\\s.*$|\\*\\*\\*\\s.*$)"::::::
nedit.styles: 	Plain:black:Plain\n\
	Comment:gray20:Italic\n\
	Keyword:black:Bold\n\
	Operator:dark blue:Bold\n\
	Bracket:dark blue:Bold\n\
	Storage Type:brown:Bold\n\
	Storage Type1:saddle brown:Bold\n\
	String:darkGreen:Plain\n\
	String1:SeaGreen:Plain\n\
	String2:darkGreen:Bold\n\
	Preprocessor:RoyalBlue4:Plain\n\
	Preprocessor1:blue:Plain\n\
	Character Const:darkGreen:Plain\n\
	Numeric Const:darkGreen:Plain\n\
	Identifier:brown:Plain\n\
	Identifier1:RoyalBlue4:Plain\n\
	Identifier2:SteelBlue:Plain\n\
	Subroutine:brown:Plain\n\
	Subroutine1:chocolate:Plain\n\
	Ada Attributes:plum:Bold\n\
	Label:red:Italic\n\
	Flag:red:Bold\n\
	Text Comment:SteelBlue4:Italic\n\
	Text Key:VioletRed4:Bold\n\
	Text Key1:VioletRed4:Plain\n\
	Text Arg:RoyalBlue4:Bold\n\
	Text Arg1:SteelBlue4:Bold\n\
	Text Arg2:RoyalBlue4:Plain\n\
	Text Escape:gray30:Bold\n\
	LaTeX Math:darkGreen:Plain\n\
	Pointer:#660000:Bold\n\
	Regex:#009944:Bold\n\
	Warning:brown2:Italic
nedit.smartIndentInit: 	C:Default\n\
	C++:Default\n\
	Python:Default\n\
	Matlab:Default
nedit.smartIndentInitCommon: Default
nedit.autoWrap: None
nedit.wrapMargin: 0
nedit.autoIndent: Smart
nedit.autoSave: True
nedit.openInTab: True
nedit.saveOldVersion: False
nedit.showMatching: Delimiter
nedit.matchSyntaxBased: True
nedit.highlightSyntax: True
nedit.backlightChars: True
nedit.searchDialogs: False
nedit.beepOnSearchWrap: False
nedit.retainSearchDialogs: True
nedit.searchWraps: True
nedit.stickyCaseSenseButton: True
nedit.repositionDialogs: True
nedit.autoScroll: False
nedit.appendLF: True
nedit.sortOpenPrevMenu: True
nedit.statisticsLine: True
nedit.iSearchLine: True
nedit.sortTabs: False
nedit.tabBar: True
nedit.tabBarHideOne: False
nedit.toolTips: True
nedit.globalTabNavigate: False
nedit.lineNumbers: False
nedit.pathInWindowsMenu: True
nedit.warnFileMods: True
nedit.warnRealFileMods: True
nedit.warnExit: True
nedit.searchMethod: CaseSense
nedit.textRows: 24
nedit.textCols: 80
nedit.tabDistance: 4
nedit.emulateTabs: 4
nedit.insertTabs: False
nedit.textFont: -adobe-courier-medium-r-normal--12-120-75-75-m-70-iso8859-1
nedit.boldHighlightFont: -adobe-courier-bold-r-normal--12-120-75-75-m-70-iso8859-1
nedit.italicHighlightFont: -adobe-courier-medium-o-normal--12-120-75-75-m-70-iso8859-1
nedit.boldItalicHighlightFont: -adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1
nedit.textFgColor: black
nedit.textBgColor: white
nedit.selectFgColor: black
nedit.selectBgColor: #d0d0FF
nedit.hiliteFgColor: white
nedit.hiliteBgColor: red
nedit.lineNoFgColor: black
nedit.cursorFgColor: black
nedit.shell: /bin/bash
nedit.smartTags: True
nedit.prefFileRead: True
nedit.titleFormat: {%c} [%s] %f (%S) - %d
